clipX {
transform:
  bool in = @Xmin >= real(#pixel) || @Xmax < real(#pixel)
  if @isinner
    in = !in
  endif
  #solid = in
default:
  param Xmin
    default = -0.5
  endparam
  param Xmax
    default = 0.5
  endparam
  bool param isinner
    default = false
  endparam
}

clipY {
transform:
  bool in = @Xmin >= imag(#pixel) || @Xmax < imag(#pixel)
  if @isinner
    in = !in
  endif
  #solid = in
default:
  param Xmin
    default = -0.5
  endparam
  param Xmax
    default = 0.5
  endparam
  bool param isinner
    default = false
  endparam
}

clip_quadrant {
transform:
  bool upX = @Xmin < real(#pixel)
  bool upY = @Ymin < imag(#pixel)
  if @isDown
    upY = !upY
  endif
  if @isLeft
    upX = !upX
  endif
  bool in = upX && upY
  if @isOuter
    in = !in
  endif 
  #solid = in 
default:
  float param Xmin
    default = 0
  endparam
  float param Ymin
    default = 0
  endparam
  bool param isDown
    default = false
  endparam
  bool param isLeft
    default = false
  endparam
  bool param isOuter
    default = false
  endparam
}

clip_hack_01 {
transform:
  bool upX = @X && (@Xmin < real(#pixel))
  bool upY = @Y && (@Ymin < imag(#pixel))
  bool in = upX != upY
  if @isOuter
    in = !in
  endif 
  #solid = in 
default:
  float param Xmin
    default = 0
  endparam
  float param Ymin
    default = 0
  endparam
  bool param X
    caption = "x > 0 ?"
    default = true
  endparam
  bool param Y
    caption = "y > 0 ?"
    default = true
  endparam
  bool param isOuter
    default = false
  endparam
}

checkerboardPattern {
transform:
  p = (#pixel - @center) / @squaresize
  a = ceil(p) - p
  bool upX = 0.5 > real(a)
  bool upY = 0.5 > imag(a)
  bool in = upX != upY
  #solid = in 
default:
  complex param squaresize
    default = 1
  endparam
  complex param center
    default = 0
  endparam
}

clip_hack_02 {
transform:
  float p = imag(#pixel)
  if @bparam2
    p = -p
  endif 
  bool in = real(#pixel) < (@Zmin - p)
  if @isOuter
    in = !in
  endif 
  #solid = in 
default:
  float param Zmin
    default = 0
  endparam
  bool param isOuter
    default = false
  endparam
  bool param bparam2
    default = false
  endparam
}

clip_hack_03 {
transform:
  p = (#pixel - @center) / @squaresize
  a = ceil(p) - p
  bool upX = 0.5 > real(a)
  bool upY = 0.5 > imag(a)
  bool in = upX && upY
  if @isOuter
    in = !in
  endif 
  #solid = in 
default:
  complex param squaresize
    default = 1
  endparam
  complex param center
    default = 0
  endparam
  bool param isOuter
    default = false
  endparam
}

uxf_Func11 {
transform:
  if @enablevalue
    #pixel = @xfunc(@xfunc2(#pixel)) + #pixel + @add
  else
    #pixel = #pixel
  endif
default:
  title = "fn(fn(pixel)) + pixel"
  param add
    caption = "Increment Value"
    default = (0, 0)
  endparam
  func xfunc
    default = sin()
  endfunc
  func xfunc2
    default = sqr()
  endfunc
  bool param enablevalue
    default = false
  endparam
}

uxf_Func12 {
transform:
  if @enablevalue
    #pixel = @xfunc(#pixel) * #pixel + @add
  else
    #pixel = #pixel
  endif
default:
  title = "fn(pixel) * pixel"
  param add
    caption = "Increment Value"
    default = (0, 0)
  endparam
  func xfunc
    default = sin()
  endfunc
  bool param enablevalue
    default = false
  endparam
}

uxf_Func13 {
transform:
  if @enablevalue
    #pixel = @xfunc(#pixel) / #pixel + @add
  else
    #pixel = #pixel
  endif
default:
  title = "fn(pixel) / pixel"
  param add
    caption = "Increment Value"
    default = (0, 0)
  endparam
  func xfunc
    default = sin()
  endfunc
  bool param enablevalue
    default = false
  endparam
}
